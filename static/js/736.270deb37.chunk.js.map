{"version":3,"file":"static/js/736.270deb37.chunk.js","mappings":"0RAEaA,EAAWC,EAAAA,EAAAA,GAAH,uSAaRC,EAAgBD,EAAAA,EAAAA,IAAH,sBAEbE,EAAgBF,EAAAA,EAAAA,GAAH,4HAQbG,EAAgBH,EAAAA,EAAAA,IAAH,sNAYbI,EAAcJ,EAAAA,EAAAA,IAAH,8C,SCkCxB,EA5Da,WACX,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,gHAIFC,EAAAA,EAAAA,IAAeJ,GAJb,uBAGFF,EAHE,EAGVO,KAAQP,KAGVC,EAAuBD,EAfhBQ,KAAI,kBAA4C,CACzDC,GADa,EAAGA,GAEhBC,UAFa,EAAOA,UAGpBC,KAHa,EAAkBA,KAI/BC,aAJa,EAAwBA,aAAxB,KASC,kBAOLZ,GAPK,gCASZa,QAAQC,IAAI,KAAIC,SATJ,yDAAH,qDAYbV,GACD,GAAE,CAACH,KAGF,SAACN,EAAD,UACII,EAAKgB,OAGLhB,EAAKQ,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAC/B,OACE,UAACnB,EAAD,YACE,SAACE,EAAD,WACE,SAACG,EAAD,CACEmB,IACEL,EAAY,0CAC2BA,GAD3B,iGAIdM,IAAKP,EACLQ,MAAM,MACNC,OAAO,WAGX,UAACvB,EAAD,YACE,wBAAKc,KACL,uBAAID,SAfOD,EAmBlB,KAvBD,wEA2BP,C,mMCnEYY,EAAM,mCAENC,EAAuB,mCAAG,uGAEpBC,EAAAA,EAAAA,IAAA,mEACiDF,IAH7B,wEAMjCR,QAAQC,IAAR,MANiC,wDAAH,qDAUvBU,EAAc,mCAAG,WAAMtB,GAAN,0FAEXqB,EAAAA,EAAAA,IAAA,6CAC2BrB,EAD3B,oBAC8CmB,EAD9C,oBAFW,wEAMxBR,QAAQC,IAAR,MANwB,wDAAH,sDAUdW,EAAuB,mCAAG,WAAMC,GAAN,0FAEpBH,EAAAA,EAAAA,IAAA,4DAC0CF,EAD1C,iCACsEK,EADtE,YAFoB,wEAMjCb,QAAQC,IAAR,MANiC,wDAAH,sDAUvBR,EAAc,mCAAG,WAAMJ,GAAN,0FAEXqB,EAAAA,EAAAA,IAAA,6CAC2BrB,EAD3B,4BACsDmB,EADtD,oBAFW,wEAMxBR,QAAQC,IAAR,MANwB,wDAAH,sDAUda,EAAiB,mCAAG,WAAMzB,GAAN,0FAEdqB,EAAAA,EAAAA,IAAA,6CAC2BrB,EAD3B,4BACsDmB,EADtD,oBAFc,wEAM3BR,QAAQC,IAAR,MAN2B,wDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastItem = styled.li`\n  border-radius: 10px;\n  overflow: hidden;\n  background-color: #49248a;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 280px;\n  transition-duration: 250ms;\n  transition-property: scale;\n  transition-timing-function: ease-in-out;\n`;\n\nexport const ProfileImgBox = styled.div``;\n\nexport const ArtistGallery = styled.ul`\n  padding: 32px 0;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const ArtistNameBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  justify-content: center;\n  align-items: center;\n  height: 60px;\n  padding: 16px 0;\n  text-align: center;\n  font-size: 12px;\n`;\n\nexport const ArtistPhoto = styled.img`\n  object-fit: cover;\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/api';\nimport {\n  CastItem,\n  ProfileImgBox,\n  ArtistGallery,\n  ArtistNameBox,\n  ArtistPhoto,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const normalizedCast = arr => {\n    return arr.map(({ id, character, name, profile_path }) => ({\n      id,\n      character,\n      name,\n      profile_path,\n    }));\n  };\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const {\n          data: { cast },\n        } = await fetchMovieCast(movieId);\n\n        setCast(normalizedCast(cast));\n        return cast;\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return (\n    <ArtistGallery>\n      {!cast.length ? (\n        <p>Probably there is no information about cast</p>\n      ) : (\n        cast.map(({ id, character, name, profile_path }) => {\n          return (\n            <CastItem key={id}>\n              <ProfileImgBox>\n                <ArtistPhoto\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : `https://as2.ftcdn.net/v2/jpg/03/54/78/27/1000_F_354782704_WMBoKbL7pRjWda8YiAy4XfJ5gLAhx2aJ.jpg`\n                  }\n                  alt={name}\n                  width=\"280\"\n                  height=\"400\"\n                />\n              </ProfileImgBox>\n              <ArtistNameBox>\n                <h3>{name}</h3>\n                <p>{character}</p>\n              </ArtistNameBox>\n            </CastItem>\n          );\n        })\n      )}\n    </ArtistGallery>\n  );\n};\n\nexport default Cast;","import axios from \"axios\";\n\nexport const KEY = 'dafb4cf758741e9fd84f5c71b8506454';\n\nexport const fetchTrendingMoviesData = async () => {\n    try {\n      return await axios.get(\n        `https://api.themoviedb.org/3/trending/movie/week?api_key=${KEY}`\n      );\n    } catch (err) {\n      console.log(err);\n    }\n};\n\nexport const fetchMovieInfo = async movieId => {\n    try {\n      return await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n      );\n    } catch (err) {\n      console.log(err);\n    }\n};\n\nexport const fetchMoviesBySearchWord = async searchWord => {\n    try {\n      return await axios.get(\n        `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&language=en-US&query=${searchWord}&page=1`\n      );\n    } catch (err) {\n      console.log(err);\n    }\n};\n\nexport const fetchMovieCast = async movieId => {\n    try {\n      return await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n      );\n    } catch (err) {\n      console.log(err);\n    }\n};\n  \nexport const fetchMovieReviews = async movieId => {\n    try {\n      return await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n      );\n    } catch (err) {\n      console.log(err);\n    }\n};\n\n  "],"names":["CastItem","styled","ProfileImgBox","ArtistGallery","ArtistNameBox","ArtistPhoto","useState","cast","setCast","movieId","useParams","useEffect","getCast","fetchMovieCast","data","map","id","character","name","profile_path","console","log","message","length","src","alt","width","height","KEY","fetchTrendingMoviesData","axios","fetchMovieInfo","fetchMoviesBySearchWord","searchWord","fetchMovieReviews"],"sourceRoot":""}